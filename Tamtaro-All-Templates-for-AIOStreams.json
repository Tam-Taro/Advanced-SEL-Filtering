[
  {
    "metadata": {
      "id": "tamtaro.complete",
      "name": "Complete SEL Setup",
      "description": "Fully configured setup based on Tamtaro's recommended filters, sort orders, and SEL described [here](https://github.com/Tam-Taro/SEL-Filtering-and-Sorting). Designed for those with debrid or usenet services, while seeking the highest quality results, minimal clutter, and complete coverage even when options are few. \n\n * Comes with addons and formatter. If desired, use my other templates for no addons/formatter override\n * For catalogs, check out my github for AIOMetadata configs\n * **‚ìò Review the Language filter**: Add additional language you may be watching into both *Required* and *Preferred* fields. \n * I recommend importing [Vidhin's regex](https://github.com/Vidhin05/Releases-Regex/tree/main?tab=readme-ov-file#-raw-github-links-for-direct-import) into *Preferred Regex Patterns* to highlight streams from reputable release groups.",
      "source": "external",
      "author": "Tamtaro",
      "version": "1.0.0",
      "category": "Debrid",
      "serviceRequired": false
    },
    "config": {
      "presets": [
        {
          "type": "stremthruStore",
          "instanceId": "d7e",
          "enabled": true,
          "options": {
            "name": "StremThru Store",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "mediaTypes": [],
            "url": "https://stremthrufortheweebs.midnightignite.me/stremio/store"
          }
        },
        {
          "type": "torrentio",
          "instanceId": "4ef",
          "enabled": true,
          "options": {
            "name": "Torrentio",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "providers": [],
            "useMultipleInstances": false
          }
        },
        {
          "type": "comet",
          "instanceId": "b0f",
          "enabled": true,
          "options": {
            "name": "Comet",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "includeP2P": false,
            "removeTrash": true,
            "mediaTypes": [],
            "url": "https://cometfortheweebs.midnightignite.me"
          }
        },
        {
          "type": "mediafusion",
          "instanceId": "276",
          "enabled": true,
          "options": {
            "name": "MediaFusion",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "useCachedResultsOnly": false,
            "enableWatchlistCatalogs": false,
            "downloadViaBrowser": false,
            "contributorStreams": false,
            "certificationLevelsFilter": [],
            "nudityFilter": [],
            "mediaTypes": [],
            "url": "https://mediafusionfortheweebs.midnightignite.me"
          }
        },
        {
          "type": "stremthruTorz",
          "instanceId": "bb9",
          "enabled": true,
          "options": {
            "name": "StremThru Torz",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "mediaTypes": [],
            "includeP2P": false,
            "useMultipleInstances": false,
            "url": "https://stremthrufortheweebs.midnightignite.me/stremio/torz"
          }
        },
        {
          "type": "zilean",
          "instanceId": "7ec",
          "enabled": true,
          "options": {
            "name": "Zilean",
            "timeout": 7500,
            "mediaTypes": [],
            "useMultipleInstances": false
          }
        },
        {
          "type": "sootio",
          "instanceId": "540",
          "enabled": true,
          "options": {
            "name": "Sootio",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "url": "https://sootio.matrixnode.ru",
            "mediaTypes": [],
            "useMultipleInstances": false
          }
        },
        {
          "type": "knaben",
          "instanceId": "dc9",
          "enabled": true,
          "options": {
            "name": "Knaben",
            "timeout": 7500,
            "mediaTypes": [],
            "useMultipleInstances": false
          }
        },
        {
          "type": "animetosho",
          "instanceId": "aad",
          "enabled": true,
          "options": {
            "name": "AnimeTosho",
            "timeout": 7500,
            "mediaTypes": [
              "anime"
            ],
            "useMultipleInstances": false
          }
        },
        {
          "type": "subhero",
          "instanceId": "bed",
          "enabled": true,
          "options": {
            "name": "SubHero",
            "timeout": 6000,
            "resources": [
              "subtitles"
            ],
            "languages": [
              "en"
            ]
          }
        },
        {
          "type": "aiosubtitle",
          "instanceId": "032",
          "enabled": true,
          "options": {
            "name": "AIOSubtitle",
            "timeout": 6000,
            "resources": [
              "subtitles"
            ],
            "languages": [
              "english"
            ],
            "microsoftTranslatorRegion": "global"
          }
        }
      ],
      "formatter": {
        "id": "custom",
        "definition": {
          "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
          "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
        }
      },
      "preferredQualities": [
        "BluRay REMUX",
        "BluRay",
        "WEB-DL",
        "WEBRip",
        "HDRip",
        "HC HD-Rip",
        "DVDRip",
        "HDTV",
        "Unknown"
      ],
      "preferredResolutions": [
        "2160p",
        "1440p",
        "1080p",
        "720p",
        "Unknown",
        "576p",
        "480p",
        "360p",
        "240p",
        "144p"
      ],
      "excludedQualities": [],
      "excludedVisualTags": [
        "3D",
        "H-OU",
        "H-SBS"
      ],
      "sortCriteria": {
        "global": [
          {
            "key": "cached",
            "direction": "desc"
          }
        ],
        "series": [],
        "anime": [],
        "cached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "visualTag",
            "direction": "desc"
          },
          {
            "key": "audioTag",
            "direction": "desc"
          },
          {
            "key": "encode",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          }
        ],
        "uncached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          }
        ],
        "cachedMovies": []
      },
      "deduplicator": {
        "enabled": true,
        "multiGroupBehaviour": "aggressive",
        "keys": [
          "filename",
          "infoHash",
          "smartDetect"
        ],
        "cached": "single_result",
        "uncached": "single_result",
        "p2p": "single_result"
      },
      "config": {
        "formatter": {
          "id": "custom",
          "definition": {
            "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá À¢·µó ≥·µâ·µÉ·µê‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
            "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
          }
        }
      },
      "excludeUncachedFromAddons": [],
      "excludeUncachedFromServices": [],
      "excludeUncachedFromStreamTypes": [],
      "excludeCachedFromAddons": [],
      "excludeCachedFromServices": [],
      "excludeCachedFromStreamTypes": [],
      "preferredEncodes": [
        "AV1",
        "HEVC",
        "AVC",
        "Unknown"
      ],
      "preferredStreamTypes": [
        "usenet",
        "debrid",
        "p2p",
        "http",
        "live"
      ],
      "preferredVisualTags": [
        "HDR+DV",
        "HDR10+",
        "HDR10",
        "DV",
        "HDR",
        "10bit",
        "IMAX",
        "AI",
        "SDR",
        "Unknown"
      ],
      "preferredAudioTags": [
        "Atmos",
        "DD+",
        "DD"
      ],
      "requiredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dual Audio",
        "Dubbed",
        "Multi",
        "Unknown"
      ],
      "excludedLanguages": [],
      "includedLanguages": [],
      "preferredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dubbed",
        "Dual Audio",
        "Multi",
        "Unknown"
      ],
      "titleMatching": {
        "mode": "exact",
        "enabled": true,
        "requestTypes": [
          "movie",
          "series"
        ],
        "addons": [],
        "similarityThreshold": 1
      },
      "yearMatching": {
        "enabled": true,
        "tolerance": 1,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "seasonEpisodeMatching": {
        "enabled": true,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "tmdbAccessToken": "<template_placeholder>",
      "autoPlay": {
        "attributes": [
          "service",
          "proxied",
          "resolution",
          "quality",
          "encode",
          "audioTags",
          "visualTags",
          "languages",
          "releaseGroup"
        ]
      },
      "cacheAndPlay": {
        "enabled": true,
        "streamTypes": [
          "usenet"
        ]
      },
      "statistics": {
        "enabled": false,
        "position": "top",
        "statsToShow": [
          "addon",
          "filter"
        ]
      },
      "hideErrorsForResources": [
        "stream"
      ],
      "trusted": false,
      "excludedResolutions": [],
      "includedResolutions": [],
      "requiredResolutions": [],
      "includedQualities": [],
      "requiredQualities": [],
      "includedVisualTags": [],
      "requiredVisualTags": [],
      "excludedAudioTags": [],
      "includedAudioTags": [],
      "requiredAudioTags": [],
      "excludedAudioChannels": [],
      "includedAudioChannels": [],
      "requiredAudioChannels": [],
      "preferredAudioChannels": [],
      "excludedStreamTypes": [],
      "includedStreamTypes": [],
      "requiredStreamTypes": [],
      "excludedEncodes": [],
      "includedEncodes": [],
      "requiredEncodes": [],
      "excludedRegexPatterns": [],
      "includedKeywords": [],
      "excludeSeederRange": [
        0,
        1000
      ],
      "includeSeederRange": [
        0,
        1000
      ],
      "requiredSeederRange": [
        0,
        1000
      ],
      "seederRangeTypes": [],
      "excludeUncached": false,
      "excludeUncachedMode": "or",
      "excludedStreamExpressions": [
        "count(type(streams, 'debrid', 'usenet')) > 0?  ( count(type(cached(streams), 'debrid','usenet')) < 5 ? [] :  merge( count(regexMatched(streams)) > 0 ? seeders(merge(regexMatched(negate(uncached(type(streams, 'usenet')),uncached(streams)), '', 'Bad'), type(streams, 'p2p')), 0,10):seeders(merge(negate(uncached(type(streams, 'usenet')),uncached(streams)), type(streams, 'p2p')), 0,10),  count(resolution(cached(streams), '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(cached(streams), '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 10) :   count(resolution(cached(streams), '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) :   []    ) ): count(type(streams, 'p2p','http')) < 5 ? [] :  merge(count(seeders(type(streams, 'p2p'), 10))> 5? seeders(type(streams, 'p2p'), 0,10):[],  count(resolution(streams, '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(streams, '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 5) :   count(resolution(streams, '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) : [])",
        "merge(   count(resolution(quality(streams,'Bluray REMUX'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Bluray'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'WEB-DL'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'WEB-DL'),'720p','Unknown'), 1) : [] )",
        "merge( count(resolution(quality(streams,'WEBRip'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'720p','Unknown')) > 1 ?  slice(resolution(quality(streams,'WEBRip'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p')) > 3 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p'), 3) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Unknown'),'2160p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'2160p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'1440p','1080p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'1440p','1080p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Unknown'),'720p','Unknown'), 1) : [],  count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip')) > 5 ? quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV', 'CAM','TS','TC','SCR','Unknown'): count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip','HDRip','HC HD-Rip','DVDRip','HDTV')) > 5 ? quality(streams,'CAM','TS','TC','SCR','Unknown') : [],  count(negate(regexMatched(cached(streams), 'Bad'), regexMatched(cached(streams)))) >= 5 ? regexMatched(streams,'Bad') : [] )"
      ],
      "requiredStreamExpressions": [],
      "preferredStreamExpressions": [],
      "includedStreamExpressions": [],
      "dynamicAddonFetching": {
        "enabled": true,
        "condition": "totalTimeTaken > 6000"
      },
      "groups": {
        "enabled": false
      },
      "rpdbUseRedirectApi": true,
      "resultLimits": {},
      "size": {
        "global": {
          "movies": [
            0,
            100000000000
          ],
          "series": [
            0,
            100000000000
          ]
        },
        "resolution": {
          "2160p": {
            "movies": [
              0,
              100000000000
            ]
          }
        }
      },
      "hideErrors": false,
      "precacheNextEpisode": true,
      "alwaysPrecache": true,
      "catalogModifications": [],
      "externalDownloads": false,
      "tvdbApiKey": "<template_placeholder>",
      "tmdbApiKey": "<template_placeholder>",
      "rpdbApiKey": "<template_placeholder>",
      "digitalReleaseFilter": true
    }
  },
  {
    "metadata": {
      "id": "tamtaro.complete.no-addons",
      "name": "SEL Setup without Addons",
      "description": "Fully configured setup based on Tamtaro's recommended filters, sort orders, and SEL described [here](https://github.com/Tam-Taro/SEL-Filtering-and-Sorting). Designed for those with debrid or usenet services, while seeking the highest quality results, minimal clutter, and complete coverage even when options are few. \n\n * **Comes with no addons, so using this template will not affect your addons page** \n * For catalogs, check out my github for AIOMetadata configs\n * **‚ìò Review the Language filter**: Add additional language you may be watching into both *Required* and *Preferred* fields. \n * I recommend importing [Vidhin's regex](https://github.com/Vidhin05/Releases-Regex/tree/main?tab=readme-ov-file#-raw-github-links-for-direct-import) into *Preferred Regex Patterns* to highlight streams from reputable release groups.",
      "source": "external",
      "author": "Tamtaro",
      "version": "1.0.0",
      "category": "Debrid",
      "serviceRequired": false
    },
    "config": {
      "formatter": {
        "id": "custom",
        "definition": {
          "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
          "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
        }
      },
      "preferredQualities": [
        "BluRay REMUX",
        "BluRay",
        "WEB-DL",
        "WEBRip",
        "HDRip",
        "HC HD-Rip",
        "DVDRip",
        "HDTV",
        "Unknown"
      ],
      "preferredResolutions": [
        "2160p",
        "1440p",
        "1080p",
        "720p",
        "Unknown",
        "576p",
        "480p",
        "360p",
        "240p",
        "144p"
      ],
      "excludedQualities": [],
      "excludedVisualTags": [
        "3D",
        "H-OU",
        "H-SBS"
      ],
      "sortCriteria": {
        "global": [
          {
            "key": "cached",
            "direction": "desc"
          }
        ],
        "series": [],
        "anime": [],
        "cached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "visualTag",
            "direction": "desc"
          },
          {
            "key": "audioTag",
            "direction": "desc"
          },
          {
            "key": "encode",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          }
        ],
        "uncached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          }
        ],
        "cachedMovies": []
      },
      "deduplicator": {
        "enabled": true,
        "multiGroupBehaviour": "aggressive",
        "keys": [
          "filename",
          "infoHash",
          "smartDetect"
        ],
        "cached": "single_result",
        "uncached": "single_result",
        "p2p": "single_result"
      },
      "config": {
        "formatter": {
          "id": "custom",
          "definition": {
            "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá À¢·µó ≥·µâ·µÉ·µê‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
            "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
          }
        }
      },
      "excludeUncachedFromAddons": [],
      "excludeUncachedFromServices": [],
      "excludeUncachedFromStreamTypes": [],
      "excludeCachedFromAddons": [],
      "excludeCachedFromServices": [],
      "excludeCachedFromStreamTypes": [],
      "preferredEncodes": [
        "AV1",
        "HEVC",
        "AVC",
        "Unknown"
      ],
      "preferredStreamTypes": [
        "usenet",
        "debrid",
        "p2p",
        "http",
        "live"
      ],
      "preferredVisualTags": [
        "HDR+DV",
        "HDR10+",
        "HDR10",
        "DV",
        "HDR",
        "10bit",
        "IMAX",
        "AI",
        "SDR",
        "Unknown"
      ],
      "preferredAudioTags": [
        "Atmos",
        "DD+",
        "DD"
      ],
      "requiredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dual Audio",
        "Dubbed",
        "Multi",
        "Unknown"
      ],
      "excludedLanguages": [],
      "includedLanguages": [],
      "preferredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dubbed",
        "Dual Audio",
        "Multi",
        "Unknown"
      ],
      "titleMatching": {
        "mode": "exact",
        "enabled": true,
        "requestTypes": [
          "movie",
          "series"
        ],
        "addons": [],
        "similarityThreshold": 1
      },
      "yearMatching": {
        "enabled": true,
        "tolerance": 1,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "seasonEpisodeMatching": {
        "enabled": true,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "tmdbAccessToken": "<template_placeholder>",
      "autoPlay": {
        "attributes": [
          "service",
          "proxied",
          "resolution",
          "quality",
          "encode",
          "audioTags",
          "visualTags",
          "languages",
          "releaseGroup"
        ]
      },
      "cacheAndPlay": {
        "enabled": true,
        "streamTypes": [
          "usenet"
        ]
      },
      "statistics": {
        "enabled": false,
        "position": "top",
        "statsToShow": [
          "addon",
          "filter"
        ]
      },
      "hideErrorsForResources": [
        "stream"
      ],
      "trusted": false,
      "excludedResolutions": [],
      "includedResolutions": [],
      "requiredResolutions": [],
      "includedQualities": [],
      "requiredQualities": [],
      "includedVisualTags": [],
      "requiredVisualTags": [],
      "excludedAudioTags": [],
      "includedAudioTags": [],
      "requiredAudioTags": [],
      "excludedAudioChannels": [],
      "includedAudioChannels": [],
      "requiredAudioChannels": [],
      "preferredAudioChannels": [],
      "excludedStreamTypes": [],
      "includedStreamTypes": [],
      "requiredStreamTypes": [],
      "excludedEncodes": [],
      "includedEncodes": [],
      "requiredEncodes": [],
      "excludedRegexPatterns": [],
      "includedKeywords": [],
      "excludeSeederRange": [
        0,
        1000
      ],
      "includeSeederRange": [
        0,
        1000
      ],
      "requiredSeederRange": [
        0,
        1000
      ],
      "seederRangeTypes": [],
      "excludeUncached": false,
      "excludeUncachedMode": "or",
      "excludedStreamExpressions": [
        "count(type(streams, 'debrid', 'usenet')) > 0?  ( count(type(cached(streams), 'debrid','usenet')) < 5 ? [] :  merge( count(regexMatched(streams)) > 0 ? seeders(merge(regexMatched(negate(uncached(type(streams, 'usenet')),uncached(streams)), '', 'Bad'), type(streams, 'p2p')), 0,10):seeders(merge(negate(uncached(type(streams, 'usenet')),uncached(streams)), type(streams, 'p2p')), 0,10),  count(resolution(cached(streams), '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(cached(streams), '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 10) :   count(resolution(cached(streams), '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) :   []    ) ): count(type(streams, 'p2p','http')) < 5 ? [] :  merge(count(seeders(type(streams, 'p2p'), 10))> 5? seeders(type(streams, 'p2p'), 0,10):[],  count(resolution(streams, '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(streams, '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 5) :   count(resolution(streams, '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) : [])",
        "merge(   count(resolution(quality(streams,'Bluray REMUX'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Bluray'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'WEB-DL'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'WEB-DL'),'720p','Unknown'), 1) : [] )",
        "merge( count(resolution(quality(streams,'WEBRip'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'720p','Unknown')) > 1 ?  slice(resolution(quality(streams,'WEBRip'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p')) > 3 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p'), 3) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Unknown'),'2160p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'2160p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'1440p','1080p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'1440p','1080p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Unknown'),'720p','Unknown'), 1) : [],  count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip')) > 5 ? quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV', 'CAM','TS','TC','SCR','Unknown'): count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip','HDRip','HC HD-Rip','DVDRip','HDTV')) > 5 ? quality(streams,'CAM','TS','TC','SCR','Unknown') : [],  count(negate(regexMatched(cached(streams), 'Bad'), regexMatched(cached(streams)))) >= 5 ? regexMatched(streams,'Bad') : [] )"
      ],
      "requiredStreamExpressions": [],
      "preferredStreamExpressions": [],
      "includedStreamExpressions": [],
      "rpdbUseRedirectApi": true,
      "resultLimits": {},
      "size": {
        "global": {
          "movies": [
            0,
            100000000000
          ],
          "series": [
            0,
            100000000000
          ]
        },
        "resolution": {
          "2160p": {
            "movies": [
              0,
              100000000000
            ]
          }
        }
      },
      "hideErrors": false,
      "precacheNextEpisode": true,
      "alwaysPrecache": true,
      "externalDownloads": false,
      "tvdbApiKey": "<template_placeholder>",
      "tmdbApiKey": "<template_placeholder>",
      "rpdbApiKey": "<template_placeholder>",
      "digitalReleaseFilter": true
    }
  },
  {
    "metadata": {
      "id": "tamtaro.complete.no-addons-or-formatter",
      "name": "SEL Setup without Addons or Formatter",
      "description": "Fully configured setup based on Tamtaro's recommended filters, sort orders, and SEL described [here](https://github.com/Tam-Taro/SEL-Filtering-and-Sorting). Designed for those with debrid or usenet services, while seeking the highest quality results, minimal clutter, and complete coverage even when options are few. \n\n * **Comes with no addons or formatter, so your existing addons page and formatter won't be affected** \n * For catalogs, check out my github for AIOMetadata configs\n * **‚ìò Review the Language filter**: Add additional language you may be watching into both *Required* and *Preferred* fields. \n * I recommend importing [Vidhin's regex](https://github.com/Vidhin05/Releases-Regex/tree/main?tab=readme-ov-file#-raw-github-links-for-direct-import) into *Preferred Regex Patterns* to highlight streams from reputable release groups.",
      "source": "external",
      "author": "Tamtaro",
      "version": "1.0.0",
      "category": "Debrid",
      "serviceRequired": false
    },
    "config": {
      "preferredQualities": [
        "BluRay REMUX",
        "BluRay",
        "WEB-DL",
        "WEBRip",
        "HDRip",
        "HC HD-Rip",
        "DVDRip",
        "HDTV",
        "Unknown"
      ],
      "preferredResolutions": [
        "2160p",
        "1440p",
        "1080p",
        "720p",
        "Unknown",
        "576p",
        "480p",
        "360p",
        "240p",
        "144p"
      ],
      "excludedQualities": [],
      "excludedVisualTags": [
        "3D",
        "H-OU",
        "H-SBS"
      ],
      "sortCriteria": {
        "global": [
          {
            "key": "cached",
            "direction": "desc"
          }
        ],
        "series": [],
        "anime": [],
        "cached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "visualTag",
            "direction": "desc"
          },
          {
            "key": "audioTag",
            "direction": "desc"
          },
          {
            "key": "encode",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          }
        ],
        "uncached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          }
        ],
        "cachedMovies": []
      },
      "deduplicator": {
        "enabled": true,
        "multiGroupBehaviour": "aggressive",
        "keys": [
          "filename",
          "infoHash",
          "smartDetect"
        ],
        "cached": "single_result",
        "uncached": "single_result",
        "p2p": "single_result"
      },
      "config": {
        "formatter": {
          "id": "custom",
          "definition": {
            "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá À¢·µó ≥·µâ·µÉ·µê‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
            "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
          }
        }
      },
      "excludeUncachedFromAddons": [],
      "excludeUncachedFromServices": [],
      "excludeUncachedFromStreamTypes": [],
      "excludeCachedFromAddons": [],
      "excludeCachedFromServices": [],
      "excludeCachedFromStreamTypes": [],
      "preferredEncodes": [
        "AV1",
        "HEVC",
        "AVC",
        "Unknown"
      ],
      "preferredStreamTypes": [
        "usenet",
        "debrid",
        "p2p",
        "http",
        "live"
      ],
      "preferredVisualTags": [
        "HDR+DV",
        "HDR10+",
        "HDR10",
        "DV",
        "HDR",
        "10bit",
        "IMAX",
        "AI",
        "SDR",
        "Unknown"
      ],
      "preferredAudioTags": [
        "Atmos",
        "DD+",
        "DD"
      ],
      "requiredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dual Audio",
        "Dubbed",
        "Multi",
        "Unknown"
      ],
      "excludedLanguages": [],
      "includedLanguages": [],
      "preferredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dubbed",
        "Dual Audio",
        "Multi",
        "Unknown"
      ],
      "titleMatching": {
        "mode": "exact",
        "enabled": true,
        "requestTypes": [
          "movie",
          "series"
        ],
        "addons": [],
        "similarityThreshold": 1
      },
      "yearMatching": {
        "enabled": true,
        "tolerance": 1,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "seasonEpisodeMatching": {
        "enabled": true,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "tmdbAccessToken": "<template_placeholder>",
      "autoPlay": {
        "attributes": [
          "service",
          "proxied",
          "resolution",
          "quality",
          "encode",
          "audioTags",
          "visualTags",
          "languages",
          "releaseGroup"
        ]
      },
      "cacheAndPlay": {
        "enabled": true,
        "streamTypes": [
          "usenet"
        ]
      },
      "statistics": {
        "enabled": false,
        "position": "top",
        "statsToShow": [
          "addon",
          "filter"
        ]
      },
      "hideErrorsForResources": [
        "stream"
      ],
      "trusted": false,
      "excludedResolutions": [],
      "includedResolutions": [],
      "requiredResolutions": [],
      "includedQualities": [],
      "requiredQualities": [],
      "includedVisualTags": [],
      "requiredVisualTags": [],
      "excludedAudioTags": [],
      "includedAudioTags": [],
      "requiredAudioTags": [],
      "excludedAudioChannels": [],
      "includedAudioChannels": [],
      "requiredAudioChannels": [],
      "preferredAudioChannels": [],
      "excludedStreamTypes": [],
      "includedStreamTypes": [],
      "requiredStreamTypes": [],
      "excludedEncodes": [],
      "includedEncodes": [],
      "requiredEncodes": [],
      "excludedRegexPatterns": [],
      "includedKeywords": [],
      "excludeSeederRange": [
        0,
        1000
      ],
      "includeSeederRange": [
        0,
        1000
      ],
      "requiredSeederRange": [
        0,
        1000
      ],
      "seederRangeTypes": [],
      "excludeUncached": false,
      "excludeUncachedMode": "or",
      "excludedStreamExpressions": [
        "count(type(streams, 'debrid', 'usenet')) > 0?  ( count(type(cached(streams), 'debrid','usenet')) < 5 ? [] :  merge( count(regexMatched(streams)) > 0 ? seeders(merge(regexMatched(negate(uncached(type(streams, 'usenet')),uncached(streams)), '', 'Bad'), type(streams, 'p2p')), 0,10):seeders(merge(negate(uncached(type(streams, 'usenet')),uncached(streams)), type(streams, 'p2p')), 0,10),  count(resolution(cached(streams), '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(cached(streams), '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 10) :   count(resolution(cached(streams), '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) :   []    ) ): count(type(streams, 'p2p','http')) < 5 ? [] :  merge(count(seeders(type(streams, 'p2p'), 10))> 5? seeders(type(streams, 'p2p'), 0,10):[],  count(resolution(streams, '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(streams, '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 5) :   count(resolution(streams, '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) : [])",
        "merge(   count(resolution(quality(streams,'Bluray REMUX'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Bluray'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'WEB-DL'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'WEB-DL'),'720p','Unknown'), 1) : [] )",
        "merge( count(resolution(quality(streams,'WEBRip'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'720p','Unknown')) > 1 ?  slice(resolution(quality(streams,'WEBRip'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p')) > 3 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p'), 3) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Unknown'),'2160p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'2160p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'1440p','1080p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'1440p','1080p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Unknown'),'720p','Unknown'), 1) : [],  count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip')) > 5 ? quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV', 'CAM','TS','TC','SCR','Unknown'): count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip','HDRip','HC HD-Rip','DVDRip','HDTV')) > 5 ? quality(streams,'CAM','TS','TC','SCR','Unknown') : [],  count(negate(regexMatched(cached(streams), 'Bad'), regexMatched(cached(streams)))) >= 5 ? regexMatched(streams,'Bad') : [] )"
      ],
      "requiredStreamExpressions": [],
      "preferredStreamExpressions": [],
      "includedStreamExpressions": [],
      "rpdbUseRedirectApi": true,
      "resultLimits": {},
      "size": {
        "global": {
          "movies": [
            0,
            100000000000
          ],
          "series": [
            0,
            100000000000
          ]
        },
        "resolution": {
          "2160p": {
            "movies": [
              0,
              100000000000
            ]
          }
        }
      },
      "hideErrors": false,
      "precacheNextEpisode": true,
      "alwaysPrecache": true,
      "externalDownloads": false,
      "tvdbApiKey": "<template_placeholder>",
      "tmdbApiKey": "<template_placeholder>",
      "rpdbApiKey": "<template_placeholder>",
      "digitalReleaseFilter": true
    }
  },
  {
    "metadata": {
      "id": "tamtaro.complete.p2p",
      "name": "Complete SEL Setup for P2P",
      "description": "Fully configured setup for P2P users, based on Tamtaro's recommended filters, sort orders, and SEL described [here](https://github.com/Tam-Taro/SEL-Filtering-and-Sorting). Designed for those without a debrid service but still want the highest quality results, minimal clutter, and complete coverage even when options are few. \n\n * Comes with tailored sort order for non-debrid usage. \n * Preconfigured with both P2P and HTTP streaming addons, and formatter. \n * For catalogs, check out my github for AIOMetadata configs\n * **‚ìò Review the Language filter**: Add additional language you may be watching into both *Required* and *Preferred* fields. \n * I recommend importing [Vidhin's regex](https://github.com/Vidhin05/Releases-Regex/tree/main?tab=readme-ov-file#-raw-github-links-for-direct-import) into *Preferred Regex Patterns* to highlight streams from reputable release groups.",
      "source": "external",
      "author": "Tamtaro",
      "version": "1.0.1",
      "category": "P2P",
      "serviceRequired": false
    },
    "config": {
      "presets": [
        {
          "type": "torrentio",
          "instanceId": "4ef",
          "enabled": true,
          "options": {
            "name": "Torrentio",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "providers": [],
            "useMultipleInstances": false
          }
        },
        {
          "type": "comet",
          "instanceId": "b0f",
          "enabled": true,
          "options": {
            "name": "Comet",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "includeP2P": false,
            "removeTrash": true,
            "mediaTypes": [],
            "url": "https://cometfortheweebs.midnightignite.me"
          }
        },
        {
          "type": "mediafusion",
          "instanceId": "276",
          "enabled": true,
          "options": {
            "name": "MediaFusion",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "useCachedResultsOnly": false,
            "enableWatchlistCatalogs": false,
            "downloadViaBrowser": false,
            "contributorStreams": false,
            "certificationLevelsFilter": [],
            "nudityFilter": [],
            "mediaTypes": [],
            "url": "https://mediafusionfortheweebs.midnightignite.me"
          }
        },
        {
          "type": "stremthruTorz",
          "instanceId": "bb9",
          "enabled": true,
          "options": {
            "name": "StremThru Torz",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "mediaTypes": [],
            "includeP2P": false,
            "useMultipleInstances": false,
            "url": "https://stremthrufortheweebs.midnightignite.me/stremio/torz"
          }
        },
        {
          "type": "torrents-db",
          "instanceId": "a15",
          "enabled": true,
          "options": {
            "name": "TorrentsDB",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "mediaTypes": [],
            "providers": [
              "yts",
              "1337x",
              "torrentcsv",
              "1lou",
              "nyaa",
              "sktorrent",
              "1tamilblasters",
              "limetorrent",
              "1tamilmv",
              "rargb",
              "knaben",
              "thepiratebay",
              "kickasstorrents",
              "animetosho",
              "extremlymtorrents",
              "yggtorrent",
              "tokyotosho",
              "rutor",
              "rutracker",
              "torrent9",
              "ilcorsaronero",
              "manual"
            ],
            "includeP2P": false,
            "useMultipleInstances": false
          }
        },
        {
          "type": "peerflix",
          "instanceId": "8b6",
          "enabled": true,
          "options": {
            "name": "Peerflix",
            "timeout": 7500,
            "resources": [
              "stream",
              "meta"
            ],
            "mediaTypes": [],
            "useMultipleInstances": false,
            "showTorrentLinks": false
          }
        },
        {
          "type": "nuvio-streams",
          "instanceId": "703",
          "enabled": true,
          "options": {
            "name": "Nuvio Anime",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "url": "",
            "showBoxRegion": "USA7",
            "providers": [
              "animepahe"
            ],
            "mediaTypes": [
              "anime"
            ]
          }
        },
        {
          "type": "nuvio-streams",
          "instanceId": "0f6",
          "enabled": true,
          "options": {
            "name": "Nuvio Streams",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "url": "",
            "showBoxRegion": "USA7",
            "providers": [
              "showbox",
              "vidzee",
              "vidsrc",
              "mp4hydra",
              "uhdmovies",
              "moviesmod",
              "moviesdrive",
              "4khdhub"
            ],
            "mediaTypes": []
          }
        },
        {
          "type": "webstreamr",
          "instanceId": "645",
          "enabled": true,
          "options": {
            "name": "WebStreamr",
            "timeout": 7500,
            "resources": [
              "stream"
            ],
            "mediaTypes": [],
            "providers": [
              "multi",
              "en"
            ],
            "includeExternalUrls": false,
            "showErrors": false
          }
        },
        {
          "type": "aiosubtitle",
          "instanceId": "032",
          "enabled": true,
          "options": {
            "name": "AIOSubtitle",
            "timeout": 6000,
            "resources": [
              "subtitles"
            ],
            "languages": [
              "english"
            ],
            "microsoftTranslatorRegion": "global"
          }
        },
        {
          "type": "subhero",
          "instanceId": "bed",
          "enabled": true,
          "options": {
            "name": "SubHero",
            "timeout": 7500,
            "resources": [
              "subtitles"
            ],
            "languages": [
              "en"
            ]
          }
        }
      ],
      "formatter": {
        "id": "custom",
        "definition": {
          "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
          "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
        }
      },
      "preferredQualities": [
        "BluRay REMUX",
        "BluRay",
        "WEB-DL",
        "WEBRip",
        "HDRip",
        "HC HD-Rip",
        "DVDRip",
        "HDTV",
        "Unknown"
      ],
      "preferredResolutions": [
        "2160p",
        "1440p",
        "1080p",
        "720p",
        "Unknown",
        "576p",
        "480p",
        "360p",
        "240p",
        "144p"
      ],
      "excludedQualities": [],
      "excludedVisualTags": [
        "3D",
        "H-OU",
        "H-SBS"
      ],
      "sortCriteria": {
        "global": [
          {
            "key": "cached",
            "direction": "desc"
          }
        ],
        "series": [],
        "anime": [],
        "cached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          },
          {
            "key": "visualTag",
            "direction": "desc"
          },
          {
            "key": "audioTag",
            "direction": "desc"
          },
          {
            "key": "encode",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          }
        ],
        "uncached": [
          {
            "key": "resolution",
            "direction": "desc"
          },
          {
            "key": "library",
            "direction": "desc"
          },
          {
            "key": "streamType",
            "direction": "desc"
          },
          {
            "key": "regexPatterns",
            "direction": "desc"
          },
          {
            "key": "seeders",
            "direction": "desc"
          },
          {
            "key": "quality",
            "direction": "desc"
          },
          {
            "key": "language",
            "direction": "desc"
          },
          {
            "key": "size",
            "direction": "desc"
          }
        ],
        "cachedMovies": []
      },
      "deduplicator": {
        "enabled": true,
        "multiGroupBehaviour": "aggressive",
        "keys": [
          "filename",
          "infoHash",
          "smartDetect"
        ],
        "cached": "single_result",
        "uncached": "single_result",
        "p2p": "single_result"
      },
      "config": {
        "formatter": {
          "id": "custom",
          "definition": {
            "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá À¢·µó ≥·µâ·µÉ·µê‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
            "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
          }
        }
      },
      "excludeUncachedFromAddons": [],
      "excludeUncachedFromServices": [],
      "excludeUncachedFromStreamTypes": [],
      "excludeCachedFromAddons": [],
      "excludeCachedFromServices": [],
      "excludeCachedFromStreamTypes": [],
      "preferredEncodes": [
        "AV1",
        "HEVC",
        "AVC",
        "Unknown"
      ],
      "preferredStreamTypes": [
        "usenet",
        "debrid",
        "p2p",
        "http",
        "live"
      ],
      "preferredVisualTags": [
        "HDR+DV",
        "HDR10+",
        "HDR10",
        "DV",
        "HDR",
        "10bit",
        "IMAX",
        "AI",
        "SDR",
        "Unknown"
      ],
      "preferredAudioTags": [
        "Atmos",
        "DD+",
        "DD"
      ],
      "requiredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dual Audio",
        "Dubbed",
        "Multi",
        "Unknown"
      ],
      "excludedLanguages": [],
      "includedLanguages": [],
      "preferredLanguages": [
        "English",
        "Japanese",
        "Korean",
        "Dubbed",
        "Dual Audio",
        "Multi",
        "Unknown"
      ],
      "titleMatching": {
        "mode": "exact",
        "similarityThreshold": 1,
        "enabled": true,
        "requestTypes": [
          "movie",
          "series"
        ],
        "addons": []
      },
      "yearMatching": {
        "enabled": true,
        "tolerance": 1,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "seasonEpisodeMatching": {
        "enabled": true,
        "requestTypes": [
          "movie",
          "series",
          "anime"
        ],
        "addons": []
      },
      "tmdbAccessToken": "<template_placeholder>",
      "autoPlay": {
        "attributes": [
          "service",
          "proxied",
          "resolution",
          "quality",
          "encode",
          "audioTags",
          "visualTags",
          "languages",
          "releaseGroup"
        ]
      },
      "cacheAndPlay": {
        "enabled": true,
        "streamTypes": [
          "usenet"
        ]
      },
      "statistics": {
        "enabled": false,
        "position": "top",
        "statsToShow": [
          "addon",
          "filter"
        ]
      },
      "hideErrorsForResources": ["stream"],
      "trusted": false,
      "excludedResolutions": [],
      "includedResolutions": [],
      "requiredResolutions": [],
      "includedQualities": [],
      "requiredQualities": [],
      "includedVisualTags": [],
      "requiredVisualTags": [],
      "excludedAudioTags": [],
      "includedAudioTags": [],
      "requiredAudioTags": [],
      "excludedAudioChannels": [],
      "includedAudioChannels": [],
      "requiredAudioChannels": [],
      "preferredAudioChannels": [],
      "excludedStreamTypes": [],
      "includedStreamTypes": [],
      "requiredStreamTypes": [],
      "excludedEncodes": [],
      "includedEncodes": [],
      "requiredEncodes": [],
      "excludedRegexPatterns": [],
      "includedKeywords": [],
      "excludeSeederRange": [
        0,
        1000
      ],
      "includeSeederRange": [
        0,
        1000
      ],
      "requiredSeederRange": [
        0,
        1000
      ],
      "seederRangeTypes": [],
      "excludeUncached": false,
      "excludeUncachedMode": "or",
      "excludedStreamExpressions": [
        "count(type(streams, 'debrid', 'usenet')) > 0?  ( count(type(cached(streams), 'debrid','usenet')) < 5 ? [] :  merge( count(regexMatched(streams)) > 0 ? seeders(merge(regexMatched(negate(uncached(type(streams, 'usenet')),uncached(streams)), '', 'Bad'), type(streams, 'p2p')), 0,10):seeders(merge(negate(uncached(type(streams, 'usenet')),uncached(streams)), type(streams, 'p2p')), 0,10),  count(resolution(cached(streams), '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(cached(streams), '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 10) :   count(resolution(cached(streams), '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) :   []    ) ): count(type(streams, 'p2p','http')) < 5 ? [] :  merge(count(seeders(type(streams, 'p2p'), 10))> 5? seeders(type(streams, 'p2p'), 0,10):[],  count(resolution(streams, '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(streams, '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 5) :   count(resolution(streams, '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) : [])",
        "merge(   count(resolution(quality(streams,'Bluray REMUX'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Bluray'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'WEB-DL'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'WEB-DL'),'720p','Unknown'), 1) : [] )",
        "merge( count(resolution(quality(streams,'WEBRip'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'720p','Unknown')) > 1 ?  slice(resolution(quality(streams,'WEBRip'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p')) > 3 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p'), 3) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Unknown'),'2160p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'2160p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'1440p','1080p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'1440p','1080p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Unknown'),'720p','Unknown'), 1) : [],  count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip')) > 5 ? quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV', 'CAM','TS','TC','SCR','Unknown'): count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip','HDRip','HC HD-Rip','DVDRip','HDTV')) > 5 ? quality(streams,'CAM','TS','TC','SCR','Unknown') : [],  count(negate(regexMatched(cached(streams), 'Bad'), regexMatched(cached(streams)))) >= 5 ? regexMatched(streams,'Bad') : [] )"
      ],
      "requiredStreamExpressions": [],
      "preferredStreamExpressions": [],
      "includedStreamExpressions": [],
      "dynamicAddonFetching": {
        "enabled": true,
        "condition": "totalTimeTaken > 7500"
      },
      "groups": {
        "enabled": false
      },
      "rpdbUseRedirectApi": true,
      "resultLimits": {},
      "size": {
        "global": {
          "movies": [
            0,
            100000000000
          ],
          "series": [
            0,
            100000000000
          ]
        },
        "resolution": {
          "2160p": {
            "movies": [
              0,
              100000000000
            ]
          }
        }
      },
      "hideErrors": false,
      "precacheNextEpisode": true,
      "alwaysPrecache": true,
      "catalogModifications": [],
      "externalDownloads": false,
      "tvdbApiKey": "<template_placeholder>",
      "tmdbApiKey": "<template_placeholder>",
      "rpdbApiKey": "<template_placeholder>",
      "digitalReleaseFilter": true
    }
  },
  {
    "metadata": {
      "id": "tamtaro.sel-only",
      "name": "SEL Only Template",
      "description": "This template will import and update your excluded stream expressions to the latest SEL as described [here](https://github.com/Tam-Taro/SEL-Filtering-and-Sorting). Nothing else will get overridden in your setup. The SEL comes with three powerful lines that smartly filter your results when necessary so that your final result page has a complete coverage of quality streams with minimal clutter.",
      "source": "external",
      "author": "Tamtaro",
      "version": "1.0.0",
      "category": "SEL",
      "serviceRequired": false
    },
    "config": {
      "excludedStreamExpressions": [
        "count(type(streams, 'debrid', 'usenet')) > 0?  ( count(type(cached(streams), 'debrid','usenet')) < 5 ? [] :  merge( count(regexMatched(streams)) > 0 ? seeders(merge(regexMatched(negate(uncached(type(streams, 'usenet')),uncached(streams)), '', 'Bad'), type(streams, 'p2p')), 0,10):seeders(merge(negate(uncached(type(streams, 'usenet')),uncached(streams)), type(streams, 'p2p')), 0,10),  count(resolution(cached(streams), '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(cached(streams), '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 10) :   count(resolution(cached(streams), '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) :   []    ) ): count(type(streams, 'p2p','http')) < 5 ? [] :  merge(count(seeders(type(streams, 'p2p'), 10))> 5? seeders(type(streams, 'p2p'), 0,10):[],  count(resolution(streams, '2160p','1440p')) > 10 ? resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown') :  count(resolution(streams, '2160p','1440p','1080p')) > 10 ? slice(resolution(streams, '720p','576p','480p','360p','240p','144p','Unknown'), 5) :   count(resolution(streams, '2160p','1440p','1080p','720p')) > 10 ? slice(resolution(streams, '576p','480p','360p','240p','144p','Unknown'), 5) : [])",
        "merge(   count(resolution(quality(streams,'Bluray REMUX'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray REMUX'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray REMUX'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Bluray'),'2160p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'2160p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'Bluray'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'Bluray'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Bluray'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'WEB-DL'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEB-DL'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEB-DL'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'WEB-DL'),'720p','Unknown'), 1) : [] )",
        "merge( count(resolution(quality(streams,'WEBRip'),'2160p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'2160p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'1440p','1080p')) > 3 ? slice(resolution(quality(streams,'WEBRip'),'1440p','1080p'), 3) : [],  count(resolution(quality(streams,'WEBRip'),'720p','Unknown')) > 1 ?  slice(resolution(quality(streams,'WEBRip'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p')) > 3 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'1080p'), 3) : [],  count(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV'),'720p','Unknown'), 1) : [],  count(resolution(quality(streams,'Unknown'),'2160p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'2160p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'1440p','1080p')) > 1 ? slice(resolution(quality(streams,'Unknown'),'1440p','1080p'), 1) : [],  count(resolution(quality(streams,'Unknown'),'720p','Unknown')) > 1 ? slice(resolution(quality(streams,'Unknown'),'720p','Unknown'), 1) : [],  count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip')) > 5 ? quality(streams,'HDRip','HC HD-Rip','DVDRip','HDTV', 'CAM','TS','TC','SCR','Unknown'): count(quality(streams,'Bluray REMUX','Bluray','WEB-DL','WEBRip','HDRip','HC HD-Rip','DVDRip','HDTV')) > 5 ? quality(streams,'CAM','TS','TC','SCR','Unknown') : [],  count(negate(regexMatched(cached(streams), 'Bad'), regexMatched(cached(streams)))) >= 5 ? regexMatched(streams,'Bad') : [] )"
      ]
    }
  },
  {
    "metadata": {
      "id": "tamtaro.formatter-only",
      "name": "Formatter Only Template",
      "description": "This template will import only the formatter used in my SEL setup, nothing else will be affected. The formatter is minimal and clean, without flashy coloured emojis, while comprehensive enough to display all necessary information for stream selection. Intended to complement my SEL setup, with emphasis on resolution, stream type and quality front and center in the title section.",
      "source": "external",
      "author": "Tamtaro",
      "version": "1.0.0",
      "category": "Formatter",
      "serviceRequired": false
    },
    "config": {
      "formatter": {
        "id": "custom",
        "definition": {
          "name": "¬†¬†{stream.resolution::=2160p[\"ùüíùêä\"||\"\"]}{stream.resolution::=1440p[\"ùüêùêä\"||\"\"]}{stream.resolution::=1080p[\"ùüèùüéùüñùüéùêè\"||\"\"]}{stream.resolution::=720p[\"ùüïùüêùüéùêè\"||\"\"]}{stream.resolution::=576p[\"ùüìùüïùüîùêè\"||\"\"]}{stream.resolution::=540p[\"ùüìùüíùüéùêè\"||\"\"]}{stream.resolution::=480p[\"ùüíùüñùüéùêè\"||\"\"]}{stream.resolution::=360p[\"ùüëùüîùüéùêè\"||\"\"]}{stream.resolution::=240p[\"ùüêùüíùüéùêè \"||\"\"]}{stream.resolution::=144p[\"ùüèùüíùüíùêè\"||\"\"]} {stream.type::replace('debrid','‚Ää')::replace('p2p','‚ÅΩ·µñ¬≤·µñ‚Åæ')::replace('live','‚ÅΩÀ°·∂¶·µõ·µâ‚Åæ')::replace('http','‚ÅΩ ∑·µâ·µá‚Åæ')::replace('usenet','‚ÅΩ·µòÀ¢·µâ‚Åø·µâ·µó‚Åæ')::replace('statistic','‚ÅΩÀ¢·µó·µÉ·µóÀ¢‚Åæ')::replace('external','‚ÅΩ·µâÀ£·µó·µâ ≥‚Åø·µÉÀ°‚Åæ')::replace('error','‚ÅΩ·µâ ≥ ≥·µí ≥‚Åæ')::replace('youtube','‚ÅΩ ∏·µí·µò·µó·µò·µá·µâ‚Åæ')}{service.cached::istrue[\"‚ö°\"||\"\"]}{service.cached::isfalse[\"‚è≥\"||\"\"]}¬†¬†¬†¬†¬†¬†\n{stream.quality::exists[\"„Äå{stream.quality::title}„Äç\"||\"\"]}",
          "description": "{stream.title::exists::and::stream.library::isfalse[\"‚úé {stream.title}\"||\"\"]}{stream.title::exists::and::stream.library::istrue[\"‚òÅÔ∏é  {stream.title}\"||\"\"]}{stream.year::exists[\" ({stream.year})\"||\"\"]} {stream.season::>=0[\" S\"||\"\"]}{stream.season::<=9[\"0\"||\"\"]}{stream.season::>0[\"{stream.season}\"||\"\"]}{stream.episode::>=0[\" ¬∑ E\"||\"\"]}{stream.episode::<=9[\"0\"||\"\"]}{stream.episode::>0[\"{stream.episode}\"||\"\"]}\n{stream.encode::exists[\"‚ñ£  {stream.encode} \"||\"\"]}{stream.visualTags::exists[\"‚úß  {stream.visualTags::join(' ¬∑ ')} \"||\"\"]}\n{stream.audioTags::exists[\"‚ô¨  {stream.audioTags::join(' ¬∑ ')} \"||\"\"]}{stream.audioChannels::exists[\" ‚òä  {stream.audioChannels::join(' ¬∑ ')}\"||\"\"]}\n{stream.size::>0[\"‚óß  {stream.size::bytes} \"||\"\"]}{stream.folderSize::>0[\"/ {stream.folderSize::bytes}\"||\"\"]}{service.cached::isfalse::or::stream.type::=p2p::and::stream.seeders::>0[\" ‚áã {stream.seeders}ñßß \"||\"\"]}{stream.duration::>0[\" ¬∑ {stream.duration::time}\"||\"\"]}{stream.type::=usenet::and::stream.age::exists[\" ¬∑ {stream.age} \"||\"\"]}{stream.languages::exists[\" ¬∑ ‚öê {stream.smallLanguageCodes::join(' ¬∑ ')::replace('·¥Ö·¥ú·¥Ä ü ·¥Ä·¥ú·¥Ö…™·¥è','·¥Ö·¥ú·¥è')::replace('·¥Ö·¥ú ô ô·¥á·¥Ö','·¥Ö·¥ú ô')}\"||\"\"]}\n{stream.proxied::istrue[\"üù∞  \"||\"‚óã  \"]}{service.shortName::exists[\"[{service.shortName}] \"||\"\"]}{addon.name}{stream.releaseGroup::exists[\" ¬∑ {stream.releaseGroup}\"||\"\"]}{stream.indexer::exists::and::stream.type::=usenet[\" ¬∑ {stream.indexer}\"||\"\"]}\n{stream.regexMatched::exists[\"¬ª  {stream.regexMatched::Title}\"||\"\"]} {stream.message::exists[\"‚ìò  {stream.message}\"||\"\"]}"
        }
      }
    }
  }
]